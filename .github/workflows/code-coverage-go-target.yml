---
# [Code Coverage | Go Target]
#   do code coverage to your Go files using "go test"
#   under "dummy-module/" folder.
name: Code Coverage | Go Target
on:
  pull_request:
    branches: main
    paths: 'dummy-module/**'

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.actor }}
  cancel-in-progress: true

jobs:
  code-coverage:
    runs-on: ubuntu-latest
    if: github.actor != 'verlandz-bot'
    steps:
      - name: Setup Golang
        uses: actions/setup-go@v2
        with:
          go-version: 1.18.x

      - name: Checkout branch
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.BOT_PAT }}

      - name: Test code coverage
        id: test-code-coverage
        run: make test-target

      - name: Create coverage output
        id: create-coverage-output
        if: always()
        run: |
          covRes=$(cat code-coverage-go-target-result.out)
          covRes="${covRes//$'\n'/'<br>'}"
          covRes="${covRes//$'\r'/'<br>'}"

          echo "threshold=$(cat code-coverage-go-target-threshold.out)" >> $GITHUB_OUTPUT
          echo "result=$covRes" >> $GITHUB_OUTPUT

      - name: Print
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_PAT }}
          script: |
            // var
            let result = "${{ steps.create-coverage-output.outputs.result }}"
            result = result.replaceAll("\t", " | ");
            result = result.replaceAll("NOT PASS", ":x:");
            result = result.replaceAll("PASS", ":white_check_mark:");
            result = result.replaceAll("<br>", "\n");

            let threshold = "${{ steps.create-coverage-output.outputs.threshold }}"
            let footer = ``

            // status
            let statusIcon;
            if ("${{ steps.test-code-coverage.conclusion }}" == "success") {
              statusIcon = ":white_check_mark:"
            } else {
              statusIcon = ":x:"
              footer = `
              > **Warning**
              This is **MANDATORY** and you need to reach the threshold for each modules to **PASS**
              `
            }

            // body
            let body = ` 
              ### Code Coverage \`dummy-module/\` ${statusIcon}
              Threshold: **${threshold}%**

              Module | Coverage | Pass
              --- | --- | --- |
              ${result}

              <details>
              <summary>Note</summary>

              - <b>NOT PASS :x:</b> will be granted if there's a single failure
              - <b>PASS :white_check_mark:</b> will be granted if there's no failure

              </details>
            `            

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body+footer
            })
